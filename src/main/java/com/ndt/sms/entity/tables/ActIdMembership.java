/*
 * This file is generated by jOOQ.
*/
package com.ndt.sms.entity.tables;


import com.ndt.sms.entity.Indexes;
import com.ndt.sms.entity.Keys;
import com.ndt.sms.entity.Ndt;
import com.ndt.sms.entity.tables.records.ActIdMembershipRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActIdMembership extends TableImpl<ActIdMembershipRecord> {

    private static final long serialVersionUID = -1250775783;

    /**
     * The reference instance of <code>ndt.act_id_membership</code>
     */
    public static final ActIdMembership ACT_ID_MEMBERSHIP = new ActIdMembership();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActIdMembershipRecord> getRecordType() {
        return ActIdMembershipRecord.class;
    }

    /**
     * The column <code>ndt.act_id_membership.user_id_</code>.
     */
    public final TableField<ActIdMembershipRecord, String> USER_ID_ = createField("user_id_", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>ndt.act_id_membership.group_id_</code>.
     */
    public final TableField<ActIdMembershipRecord, String> GROUP_ID_ = createField("group_id_", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * Create a <code>ndt.act_id_membership</code> table reference
     */
    public ActIdMembership() {
        this(DSL.name("act_id_membership"), null);
    }

    /**
     * Create an aliased <code>ndt.act_id_membership</code> table reference
     */
    public ActIdMembership(String alias) {
        this(DSL.name(alias), ACT_ID_MEMBERSHIP);
    }

    /**
     * Create an aliased <code>ndt.act_id_membership</code> table reference
     */
    public ActIdMembership(Name alias) {
        this(alias, ACT_ID_MEMBERSHIP);
    }

    private ActIdMembership(Name alias, Table<ActIdMembershipRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActIdMembership(Name alias, Table<ActIdMembershipRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ndt.NDT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACT_ID_MEMBERSHIP_PKEY, Indexes.ACT_IDX_MEMB_GROUP, Indexes.ACT_IDX_MEMB_USER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ActIdMembershipRecord> getPrimaryKey() {
        return Keys.ACT_ID_MEMBERSHIP_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ActIdMembershipRecord>> getKeys() {
        return Arrays.<UniqueKey<ActIdMembershipRecord>>asList(Keys.ACT_ID_MEMBERSHIP_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ActIdMembership as(String alias) {
        return new ActIdMembership(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ActIdMembership as(Name alias) {
        return new ActIdMembership(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActIdMembership rename(String name) {
        return new ActIdMembership(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActIdMembership rename(Name name) {
        return new ActIdMembership(name, null);
    }
}
