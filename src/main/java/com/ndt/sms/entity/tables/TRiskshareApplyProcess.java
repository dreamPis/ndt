/*
 * This file is generated by jOOQ.
*/
package com.ndt.sms.entity.tables;


import com.ndt.sms.entity.Indexes;
import com.ndt.sms.entity.Keys;
import com.ndt.sms.entity.Ndt;
import com.ndt.sms.entity.tables.records.TRiskshareApplyProcessRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 风险分担申请处理
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TRiskshareApplyProcess extends TableImpl<TRiskshareApplyProcessRecord> {

    private static final long serialVersionUID = 1164061802;

    /**
     * The reference instance of <code>ndt.t_riskshare_apply_process</code>
     */
    public static final TRiskshareApplyProcess T_RISKSHARE_APPLY_PROCESS = new TRiskshareApplyProcess();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TRiskshareApplyProcessRecord> getRecordType() {
        return TRiskshareApplyProcessRecord.class;
    }

    /**
     * The column <code>ndt.t_riskshare_apply_process.id</code>.
     */
    public final TableField<TRiskshareApplyProcessRecord, BigDecimal> ID = createField("id", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>ndt.t_riskshare_apply_process.riskshare_apply_id</code>. 风险分担申请ID
     */
    public final TableField<TRiskshareApplyProcessRecord, BigDecimal> RISKSHARE_APPLY_ID = createField("riskshare_apply_id", org.jooq.impl.SQLDataType.NUMERIC, this, "风险分担申请ID");

    /**
     * The column <code>ndt.t_riskshare_apply_process.handler_id</code>. 风险分担处理人ID
     */
    public final TableField<TRiskshareApplyProcessRecord, BigDecimal> HANDLER_ID = createField("handler_id", org.jooq.impl.SQLDataType.NUMERIC, this, "风险分担处理人ID");

    /**
     * The column <code>ndt.t_riskshare_apply_process.handler_name</code>. 风险分担处理人名称
     */
    public final TableField<TRiskshareApplyProcessRecord, String> HANDLER_NAME = createField("handler_name", org.jooq.impl.SQLDataType.VARCHAR(50), this, "风险分担处理人名称");

    /**
     * The column <code>ndt.t_riskshare_apply_process.amount</code>. 风险分担阶段决定的金额
     */
    public final TableField<TRiskshareApplyProcessRecord, BigDecimal> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.NUMERIC, this, "风险分担阶段决定的金额");

    /**
     * The column <code>ndt.t_riskshare_apply_process.msg</code>.
     */
    public final TableField<TRiskshareApplyProcessRecord, String> MSG = createField("msg", org.jooq.impl.SQLDataType.VARCHAR(300), this, "");

    /**
     * The column <code>ndt.t_riskshare_apply_process.handler_files</code>. 风险分担处理提供文件
     */
    public final TableField<TRiskshareApplyProcessRecord, String> HANDLER_FILES = createField("handler_files", org.jooq.impl.SQLDataType.VARCHAR(500), this, "风险分担处理提供文件");

    /**
     * The column <code>ndt.t_riskshare_apply_process.state</code>. 分担申请所处阶段
     */
    public final TableField<TRiskshareApplyProcessRecord, Integer> STATE = createField("state", org.jooq.impl.SQLDataType.INTEGER, this, "分担申请所处阶段");

    /**
     * The column <code>ndt.t_riskshare_apply_process.create_user</code>.
     */
    public final TableField<TRiskshareApplyProcessRecord, BigDecimal> CREATE_USER = createField("create_user", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>ndt.t_riskshare_apply_process.create_time</code>.
     */
    public final TableField<TRiskshareApplyProcessRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>ndt.t_riskshare_apply_process.status</code>.
     */
    public final TableField<TRiskshareApplyProcessRecord, Short> STATUS = createField("status", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * Create a <code>ndt.t_riskshare_apply_process</code> table reference
     */
    public TRiskshareApplyProcess() {
        this(DSL.name("t_riskshare_apply_process"), null);
    }

    /**
     * Create an aliased <code>ndt.t_riskshare_apply_process</code> table reference
     */
    public TRiskshareApplyProcess(String alias) {
        this(DSL.name(alias), T_RISKSHARE_APPLY_PROCESS);
    }

    /**
     * Create an aliased <code>ndt.t_riskshare_apply_process</code> table reference
     */
    public TRiskshareApplyProcess(Name alias) {
        this(alias, T_RISKSHARE_APPLY_PROCESS);
    }

    private TRiskshareApplyProcess(Name alias, Table<TRiskshareApplyProcessRecord> aliased) {
        this(alias, aliased, null);
    }

    private TRiskshareApplyProcess(Name alias, Table<TRiskshareApplyProcessRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "风险分担申请处理");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ndt.NDT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_RISKSHARE_APPLY_PROCESS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TRiskshareApplyProcessRecord> getPrimaryKey() {
        return Keys.T_RISKSHARE_APPLY_PROCESS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TRiskshareApplyProcessRecord>> getKeys() {
        return Arrays.<UniqueKey<TRiskshareApplyProcessRecord>>asList(Keys.T_RISKSHARE_APPLY_PROCESS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TRiskshareApplyProcess as(String alias) {
        return new TRiskshareApplyProcess(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TRiskshareApplyProcess as(Name alias) {
        return new TRiskshareApplyProcess(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TRiskshareApplyProcess rename(String name) {
        return new TRiskshareApplyProcess(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TRiskshareApplyProcess rename(Name name) {
        return new TRiskshareApplyProcess(name, null);
    }
}
