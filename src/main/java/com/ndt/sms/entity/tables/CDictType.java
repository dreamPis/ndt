/*
 * This file is generated by jOOQ.
*/
package com.ndt.sms.entity.tables;


import com.ndt.sms.entity.Indexes;
import com.ndt.sms.entity.Keys;
import com.ndt.sms.entity.Ndt;
import com.ndt.sms.entity.tables.records.CDictTypeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 码表类型
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CDictType extends TableImpl<CDictTypeRecord> {

    private static final long serialVersionUID = 938477347;

    /**
     * The reference instance of <code>ndt.c_dict_type</code>
     */
    public static final CDictType C_DICT_TYPE = new CDictType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CDictTypeRecord> getRecordType() {
        return CDictTypeRecord.class;
    }

    /**
     * The column <code>ndt.c_dict_type.id</code>.
     */
    public final TableField<CDictTypeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ndt.c_dict_type.type_name</code>. 类型名
     */
    public final TableField<CDictTypeRecord, String> TYPE_NAME = createField("type_name", org.jooq.impl.SQLDataType.VARCHAR(20), this, "类型名");

    /**
     * Create a <code>ndt.c_dict_type</code> table reference
     */
    public CDictType() {
        this(DSL.name("c_dict_type"), null);
    }

    /**
     * Create an aliased <code>ndt.c_dict_type</code> table reference
     */
    public CDictType(String alias) {
        this(DSL.name(alias), C_DICT_TYPE);
    }

    /**
     * Create an aliased <code>ndt.c_dict_type</code> table reference
     */
    public CDictType(Name alias) {
        this(alias, C_DICT_TYPE);
    }

    private CDictType(Name alias, Table<CDictTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private CDictType(Name alias, Table<CDictTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "码表类型");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ndt.NDT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.C_DICT_TYPE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CDictTypeRecord> getPrimaryKey() {
        return Keys.C_DICT_TYPE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CDictTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<CDictTypeRecord>>asList(Keys.C_DICT_TYPE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CDictType as(String alias) {
        return new CDictType(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CDictType as(Name alias) {
        return new CDictType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CDictType rename(String name) {
        return new CDictType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CDictType rename(Name name) {
        return new CDictType(name, null);
    }
}
