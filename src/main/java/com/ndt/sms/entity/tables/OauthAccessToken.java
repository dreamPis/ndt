/*
 * This file is generated by jOOQ.
*/
package com.ndt.sms.entity.tables;


import com.ndt.sms.entity.Indexes;
import com.ndt.sms.entity.Keys;
import com.ndt.sms.entity.Ndt;
import com.ndt.sms.entity.tables.records.OauthAccessTokenRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OauthAccessToken extends TableImpl<OauthAccessTokenRecord> {

    private static final long serialVersionUID = -1194386300;

    /**
     * The reference instance of <code>ndt.oauth_access_token</code>
     */
    public static final OauthAccessToken OAUTH_ACCESS_TOKEN = new OauthAccessToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OauthAccessTokenRecord> getRecordType() {
        return OauthAccessTokenRecord.class;
    }

    /**
     * The column <code>ndt.oauth_access_token.token_id</code>. 该字段的值是将access_token的值通过MD5加密后存储的
     */
    public final TableField<OauthAccessTokenRecord, String> TOKEN_ID = createField("token_id", org.jooq.impl.SQLDataType.VARCHAR(256), this, "该字段的值是将access_token的值通过MD5加密后存储的");

    /**
     * The column <code>ndt.oauth_access_token.token</code>. 同oauth_client_token表
     */
    public final TableField<OauthAccessTokenRecord, byte[]> TOKEN = createField("token", org.jooq.impl.SQLDataType.BLOB, this, "同oauth_client_token表");

    /**
     * The column <code>ndt.oauth_access_token.authentication_id</code>. 同oauth_client_token表
     */
    public final TableField<OauthAccessTokenRecord, String> AUTHENTICATION_ID = createField("authentication_id", org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "同oauth_client_token表");

    /**
     * The column <code>ndt.oauth_access_token.user_name</code>. 同oauth_client_token表
     */
    public final TableField<OauthAccessTokenRecord, String> USER_NAME = createField("user_name", org.jooq.impl.SQLDataType.VARCHAR(256), this, "同oauth_client_token表");

    /**
     * The column <code>ndt.oauth_access_token.client_id</code>. 同oauth_client_token表
     */
    public final TableField<OauthAccessTokenRecord, String> CLIENT_ID = createField("client_id", org.jooq.impl.SQLDataType.VARCHAR(256), this, "同oauth_client_token表");

    /**
     * The column <code>ndt.oauth_access_token.authentication</code>. 存储将OAuth2Authentication.java对象序列化后的二进制数据.
     */
    public final TableField<OauthAccessTokenRecord, byte[]> AUTHENTICATION = createField("authentication", org.jooq.impl.SQLDataType.BLOB, this, "存储将OAuth2Authentication.java对象序列化后的二进制数据.");

    /**
     * The column <code>ndt.oauth_access_token.refresh_token</code>. 该字段的值是将refresh_token的值通过MD5加密后存储的.
     */
    public final TableField<OauthAccessTokenRecord, String> REFRESH_TOKEN = createField("refresh_token", org.jooq.impl.SQLDataType.VARCHAR(256), this, "该字段的值是将refresh_token的值通过MD5加密后存储的.");

    /**
     * Create a <code>ndt.oauth_access_token</code> table reference
     */
    public OauthAccessToken() {
        this(DSL.name("oauth_access_token"), null);
    }

    /**
     * Create an aliased <code>ndt.oauth_access_token</code> table reference
     */
    public OauthAccessToken(String alias) {
        this(DSL.name(alias), OAUTH_ACCESS_TOKEN);
    }

    /**
     * Create an aliased <code>ndt.oauth_access_token</code> table reference
     */
    public OauthAccessToken(Name alias) {
        this(alias, OAUTH_ACCESS_TOKEN);
    }

    private OauthAccessToken(Name alias, Table<OauthAccessTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private OauthAccessToken(Name alias, Table<OauthAccessTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ndt.NDT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AUTHENTICATION_ID_INDEX, Indexes.CLIENT_ID_INDEX, Indexes.OAUTH_ACCESS_TOKEN_PKEY, Indexes.REFRESH_TOKEN_INDEX, Indexes.TOKEN_ID_INDEX, Indexes.USER_NAME_INDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OauthAccessTokenRecord> getPrimaryKey() {
        return Keys.OAUTH_ACCESS_TOKEN_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OauthAccessTokenRecord>> getKeys() {
        return Arrays.<UniqueKey<OauthAccessTokenRecord>>asList(Keys.OAUTH_ACCESS_TOKEN_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthAccessToken as(String alias) {
        return new OauthAccessToken(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthAccessToken as(Name alias) {
        return new OauthAccessToken(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OauthAccessToken rename(String name) {
        return new OauthAccessToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OauthAccessToken rename(Name name) {
        return new OauthAccessToken(name, null);
    }
}
