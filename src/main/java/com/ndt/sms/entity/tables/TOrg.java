/*
 * This file is generated by jOOQ.
*/
package com.ndt.sms.entity.tables;


import com.ndt.sms.entity.Indexes;
import com.ndt.sms.entity.Keys;
import com.ndt.sms.entity.Ndt;
import com.ndt.sms.entity.tables.records.TOrgRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 组织机构表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TOrg extends TableImpl<TOrgRecord> {

    private static final long serialVersionUID = -2048483120;

    /**
     * The reference instance of <code>ndt.t_org</code>
     */
    public static final TOrg T_ORG = new TOrg();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TOrgRecord> getRecordType() {
        return TOrgRecord.class;
    }

    /**
     * The column <code>ndt.t_org.id</code>.
     */
    public final TableField<TOrgRecord, BigDecimal> ID = createField("id", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>ndt.t_org.name</code>. 名称
     */
    public final TableField<TOrgRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100), this, "名称");

    /**
     * The column <code>ndt.t_org.code</code>. 机构代码
     */
    public final TableField<TOrgRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(20), this, "机构代码");

    /**
     * The column <code>ndt.t_org.parent_id</code>. 父级ID
     */
    public final TableField<TOrgRecord, BigDecimal> PARENT_ID = createField("parent_id", org.jooq.impl.SQLDataType.NUMERIC, this, "父级ID");

    /**
     * The column <code>ndt.t_org.org_type</code>. 机构类型
     */
    public final TableField<TOrgRecord, Integer> ORG_TYPE = createField("org_type", org.jooq.impl.SQLDataType.INTEGER, this, "机构类型");

    /**
     * The column <code>ndt.t_org.org_subtype</code>. 机构子类型
     */
    public final TableField<TOrgRecord, Integer> ORG_SUBTYPE = createField("org_subtype", org.jooq.impl.SQLDataType.INTEGER, this, "机构子类型");

    /**
     * The column <code>ndt.t_org.address</code>. 地址
     */
    public final TableField<TOrgRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.VARCHAR(80), this, "地址");

    /**
     * The column <code>ndt.t_org.image_from_parent</code>. LOG图片来自父级
     */
    public final TableField<TOrgRecord, Boolean> IMAGE_FROM_PARENT = createField("image_from_parent", org.jooq.impl.SQLDataType.BOOLEAN, this, "LOG图片来自父级");

    /**
     * The column <code>ndt.t_org.logo_image_url</code>. LOG图片地址
     */
    public final TableField<TOrgRecord, String> LOGO_IMAGE_URL = createField("logo_image_url", org.jooq.impl.SQLDataType.VARCHAR(60), this, "LOG图片地址");

    /**
     * The column <code>ndt.t_org.admin_division_id</code>. 所属行政区划
     */
    public final TableField<TOrgRecord, BigDecimal> ADMIN_DIVISION_ID = createField("admin_division_id", org.jooq.impl.SQLDataType.NUMERIC, this, "所属行政区划");

    /**
     * The column <code>ndt.t_org.divisions</code>. 管辖区域
     */
    public final TableField<TOrgRecord, BigDecimal[]> DIVISIONS = createField("divisions", org.jooq.impl.SQLDataType.NUMERIC.getArrayDataType(), this, "管辖区域");

    /**
     * The column <code>ndt.t_org.is_leaf</code>. 是否为末级节点
     */
    public final TableField<TOrgRecord, Boolean> IS_LEAF = createField("is_leaf", org.jooq.impl.SQLDataType.BOOLEAN, this, "是否为末级节点");

    /**
     * The column <code>ndt.t_org.phone</code>. 联系电话
     */
    public final TableField<TOrgRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.VARCHAR(50), this, "联系电话");

    /**
     * The column <code>ndt.t_org.remark_from_parent</code>. 描述来自父级
     */
    public final TableField<TOrgRecord, Boolean> REMARK_FROM_PARENT = createField("remark_from_parent", org.jooq.impl.SQLDataType.BOOLEAN, this, "描述来自父级");

    /**
     * The column <code>ndt.t_org.remark</code>. 描述
     */
    public final TableField<TOrgRecord, String> REMARK = createField("remark", org.jooq.impl.SQLDataType.CLOB, this, "描述");

    /**
     * The column <code>ndt.t_org.status</code>. 记录状态
     */
    public final TableField<TOrgRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER, this, "记录状态");

    /**
     * The column <code>ndt.t_org.create_at</code>. 创建时间
     */
    public final TableField<TOrgRecord, Timestamp> CREATE_AT = createField("create_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "创建时间");

    /**
     * The column <code>ndt.t_org.create_by</code>. 创建人
     */
    public final TableField<TOrgRecord, BigDecimal> CREATE_BY = createField("create_by", org.jooq.impl.SQLDataType.NUMERIC, this, "创建人");

    /**
     * The column <code>ndt.t_org.update_at</code>. 更新时间
     */
    public final TableField<TOrgRecord, Timestamp> UPDATE_AT = createField("update_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新时间");

    /**
     * The column <code>ndt.t_org.update_by</code>. 更新人
     */
    public final TableField<TOrgRecord, BigDecimal> UPDATE_BY = createField("update_by", org.jooq.impl.SQLDataType.NUMERIC, this, "更新人");

    /**
     * The column <code>ndt.t_org.square_logo</code>. 正方形logo
     */
    public final TableField<TOrgRecord, String> SQUARE_LOGO = createField("square_logo", org.jooq.impl.SQLDataType.VARCHAR(100), this, "正方形logo");

    /**
     * The column <code>ndt.t_org.is_visible</code>. 是否可见
     */
    public final TableField<TOrgRecord, Boolean> IS_VISIBLE = createField("is_visible", org.jooq.impl.SQLDataType.BOOLEAN, this, "是否可见");

    /**
     * The column <code>ndt.t_org.short_name</code>. 简称
     */
    public final TableField<TOrgRecord, String> SHORT_NAME = createField("short_name", org.jooq.impl.SQLDataType.VARCHAR(20), this, "简称");

    /**
     * Create a <code>ndt.t_org</code> table reference
     */
    public TOrg() {
        this(DSL.name("t_org"), null);
    }

    /**
     * Create an aliased <code>ndt.t_org</code> table reference
     */
    public TOrg(String alias) {
        this(DSL.name(alias), T_ORG);
    }

    /**
     * Create an aliased <code>ndt.t_org</code> table reference
     */
    public TOrg(Name alias) {
        this(alias, T_ORG);
    }

    private TOrg(Name alias, Table<TOrgRecord> aliased) {
        this(alias, aliased, null);
    }

    private TOrg(Name alias, Table<TOrgRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "组织机构表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ndt.NDT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_ORG_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TOrgRecord> getPrimaryKey() {
        return Keys.T_ORG_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TOrgRecord>> getKeys() {
        return Arrays.<UniqueKey<TOrgRecord>>asList(Keys.T_ORG_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOrg as(String alias) {
        return new TOrg(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOrg as(Name alias) {
        return new TOrg(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrg rename(String name) {
        return new TOrg(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrg rename(Name name) {
        return new TOrg(name, null);
    }
}
