/*
 * This file is generated by jOOQ.
*/
package com.ndt.sms.entity.tables;


import com.ndt.sms.entity.Indexes;
import com.ndt.sms.entity.Keys;
import com.ndt.sms.entity.Ndt;
import com.ndt.sms.entity.tables.records.TLargeBreederRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 种养大户
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TLargeBreeder extends TableImpl<TLargeBreederRecord> {

    private static final long serialVersionUID = 2091979797;

    /**
     * The reference instance of <code>ndt.t_large_breeder</code>
     */
    public static final TLargeBreeder T_LARGE_BREEDER = new TLargeBreeder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TLargeBreederRecord> getRecordType() {
        return TLargeBreederRecord.class;
    }

    /**
     * The column <code>ndt.t_large_breeder.id</code>. 主键
     */
    public final TableField<TLargeBreederRecord, BigDecimal> ID = createField("id", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "主键");

    /**
     * The column <code>ndt.t_large_breeder.division_id</code>. 区县ID
     */
    public final TableField<TLargeBreederRecord, BigDecimal> DIVISION_ID = createField("division_id", org.jooq.impl.SQLDataType.NUMERIC, this, "区县ID");

    /**
     * The column <code>ndt.t_large_breeder.division_name</code>. 区（市）县
     */
    public final TableField<TLargeBreederRecord, String> DIVISION_NAME = createField("division_name", org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "区（市）县");

    /**
     * The column <code>ndt.t_large_breeder.large_code</code>. 种植代码/畜禽养殖代码/水产养殖代码
     */
    public final TableField<TLargeBreederRecord, String> LARGE_CODE = createField("large_code", org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "种植代码/畜禽养殖代码/水产养殖代码");

    /**
     * The column <code>ndt.t_large_breeder.large_name</code>. 种植场户名称/养殖场户名称
     */
    public final TableField<TLargeBreederRecord, String> LARGE_NAME = createField("large_name", org.jooq.impl.SQLDataType.VARCHAR(40).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "种植场户名称/养殖场户名称");

    /**
     * The column <code>ndt.t_large_breeder.large_area</code>. 经营耕地面积（亩）/养殖水面面积（亩）/年出栏规模（头、只、羽）
     */
    public final TableField<TLargeBreederRecord, Integer> LARGE_AREA = createField("large_area", org.jooq.impl.SQLDataType.INTEGER, this, "经营耕地面积（亩）/养殖水面面积（亩）/年出栏规模（头、只、羽）");

    /**
     * The column <code>ndt.t_large_breeder.large_small_type</code>. 种植种类/养殖种类
     */
    public final TableField<TLargeBreederRecord, String> LARGE_SMALL_TYPE = createField("large_small_type", org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "种植种类/养殖种类");

    /**
     * The column <code>ndt.t_large_breeder.large_main_product</code>. 主要品种
     */
    public final TableField<TLargeBreederRecord, String> LARGE_MAIN_PRODUCT = createField("large_main_product", org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "主要品种");

    /**
     * The column <code>ndt.t_large_breeder.large_yield</code>. 种植产量（吨）
     */
    public final TableField<TLargeBreederRecord, Integer> LARGE_YIELD = createField("large_yield", org.jooq.impl.SQLDataType.INTEGER, this, "种植产量（吨）");

    /**
     * The column <code>ndt.t_large_breeder.large_address</code>. 种植场地址/养殖场地址
     */
    public final TableField<TLargeBreederRecord, String> LARGE_ADDRESS = createField("large_address", org.jooq.impl.SQLDataType.VARCHAR(40).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "种植场地址/养殖场地址");

    /**
     * The column <code>ndt.t_large_breeder.name</code>. 业主姓名
     */
    public final TableField<TLargeBreederRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "业主姓名");

    /**
     * The column <code>ndt.t_large_breeder.phone</code>. 联系电话
     */
    public final TableField<TLargeBreederRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.VARCHAR(15), this, "联系电话");

    /**
     * The column <code>ndt.t_large_breeder.identity_code</code>. 身份证号码
     */
    public final TableField<TLargeBreederRecord, String> IDENTITY_CODE = createField("identity_code", org.jooq.impl.SQLDataType.VARCHAR(25).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "身份证号码");

    /**
     * The column <code>ndt.t_large_breeder.code</code>. 统一社会信用代码
     */
    public final TableField<TLargeBreederRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(25).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "统一社会信用代码");

    /**
     * The column <code>ndt.t_large_breeder.large_succession_data</code>. 已连续种植时间（周年）/已连续养殖时间（周年）
     */
    public final TableField<TLargeBreederRecord, Integer> LARGE_SUCCESSION_DATA = createField("large_succession_data", org.jooq.impl.SQLDataType.INTEGER, this, "已连续种植时间（周年）/已连续养殖时间（周年）");

    /**
     * The column <code>ndt.t_large_breeder.state</code>. 1、未审核，2、审核通过，3、审核不通过
     */
    public final TableField<TLargeBreederRecord, Short> STATE = createField("state", org.jooq.impl.SQLDataType.SMALLINT, this, "1、未审核，2、审核通过，3、审核不通过");

    /**
     * The column <code>ndt.t_large_breeder.is_major</code>. 是否新型经营主体
     */
    public final TableField<TLargeBreederRecord, Boolean> IS_MAJOR = createField("is_major", org.jooq.impl.SQLDataType.BOOLEAN, this, "是否新型经营主体");

    /**
     * The column <code>ndt.t_large_breeder.is_credit</code>. 是否信用主体
     */
    public final TableField<TLargeBreederRecord, Boolean> IS_CREDIT = createField("is_credit", org.jooq.impl.SQLDataType.BOOLEAN, this, "是否信用主体");

    /**
     * The column <code>ndt.t_large_breeder.large_type</code>. 1、种植，2、畜禽，3、水产
     */
    public final TableField<TLargeBreederRecord, Short> LARGE_TYPE = createField("large_type", org.jooq.impl.SQLDataType.SMALLINT, this, "1、种植，2、畜禽，3、水产");

    /**
     * The column <code>ndt.t_large_breeder.create_at</code>. 创建时间
     */
    public final TableField<TLargeBreederRecord, Timestamp> CREATE_AT = createField("create_at", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>ndt.t_large_breeder.create_by</code>. 创建人
     */
    public final TableField<TLargeBreederRecord, BigDecimal> CREATE_BY = createField("create_by", org.jooq.impl.SQLDataType.NUMERIC, this, "创建人");

    /**
     * The column <code>ndt.t_large_breeder.update_at</code>. 修改时间
     */
    public final TableField<TLargeBreederRecord, Timestamp> UPDATE_AT = createField("update_at", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "修改时间");

    /**
     * The column <code>ndt.t_large_breeder.update_by</code>. 修改人
     */
    public final TableField<TLargeBreederRecord, BigDecimal> UPDATE_BY = createField("update_by", org.jooq.impl.SQLDataType.NUMERIC, this, "修改人");

    /**
     * The column <code>ndt.t_large_breeder.town</code>. 乡镇名称
     */
    public final TableField<TLargeBreederRecord, String> TOWN = createField("town", org.jooq.impl.SQLDataType.VARCHAR(50), this, "乡镇名称");

    /**
     * The column <code>ndt.t_large_breeder.town_code</code>. 乡镇ID
     */
    public final TableField<TLargeBreederRecord, BigDecimal> TOWN_CODE = createField("town_code", org.jooq.impl.SQLDataType.NUMERIC, this, "乡镇ID");

    /**
     * The column <code>ndt.t_large_breeder.community</code>. 村站
     */
    public final TableField<TLargeBreederRecord, String> COMMUNITY = createField("community", org.jooq.impl.SQLDataType.VARCHAR(50), this, "村站");

    /**
     * The column <code>ndt.t_large_breeder.community_id</code>. 村站ID
     */
    public final TableField<TLargeBreederRecord, BigDecimal> COMMUNITY_ID = createField("community_id", org.jooq.impl.SQLDataType.NUMERIC, this, "村站ID");

    /**
     * Create a <code>ndt.t_large_breeder</code> table reference
     */
    public TLargeBreeder() {
        this(DSL.name("t_large_breeder"), null);
    }

    /**
     * Create an aliased <code>ndt.t_large_breeder</code> table reference
     */
    public TLargeBreeder(String alias) {
        this(DSL.name(alias), T_LARGE_BREEDER);
    }

    /**
     * Create an aliased <code>ndt.t_large_breeder</code> table reference
     */
    public TLargeBreeder(Name alias) {
        this(alias, T_LARGE_BREEDER);
    }

    private TLargeBreeder(Name alias, Table<TLargeBreederRecord> aliased) {
        this(alias, aliased, null);
    }

    private TLargeBreeder(Name alias, Table<TLargeBreederRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "种养大户");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ndt.NDT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_LARGE_BREEDER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TLargeBreederRecord> getPrimaryKey() {
        return Keys.T_LARGE_BREEDER_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TLargeBreederRecord>> getKeys() {
        return Arrays.<UniqueKey<TLargeBreederRecord>>asList(Keys.T_LARGE_BREEDER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TLargeBreeder as(String alias) {
        return new TLargeBreeder(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TLargeBreeder as(Name alias) {
        return new TLargeBreeder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TLargeBreeder rename(String name) {
        return new TLargeBreeder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TLargeBreeder rename(Name name) {
        return new TLargeBreeder(name, null);
    }
}
