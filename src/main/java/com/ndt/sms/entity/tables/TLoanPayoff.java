/*
 * This file is generated by jOOQ.
*/
package com.ndt.sms.entity.tables;


import com.ndt.sms.entity.Indexes;
import com.ndt.sms.entity.Keys;
import com.ndt.sms.entity.Ndt;
import com.ndt.sms.entity.tables.records.TLoanPayoffRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 贷款还款表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TLoanPayoff extends TableImpl<TLoanPayoffRecord> {

    private static final long serialVersionUID = 1273317474;

    /**
     * The reference instance of <code>ndt.t_loan_payoff</code>
     */
    public static final TLoanPayoff T_LOAN_PAYOFF = new TLoanPayoff();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TLoanPayoffRecord> getRecordType() {
        return TLoanPayoffRecord.class;
    }

    /**
     * The column <code>ndt.t_loan_payoff.id</code>.
     */
    public final TableField<TLoanPayoffRecord, BigDecimal> ID = createField("id", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>ndt.t_loan_payoff.loan_apply_id</code>. 申请id
     */
    public final TableField<TLoanPayoffRecord, BigDecimal> LOAN_APPLY_ID = createField("loan_apply_id", org.jooq.impl.SQLDataType.NUMERIC, this, "申请id");

    /**
     * The column <code>ndt.t_loan_payoff.loan_done_id</code>. 放款记录表id
     */
    public final TableField<TLoanPayoffRecord, BigDecimal> LOAN_DONE_ID = createField("loan_done_id", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "放款记录表id");

    /**
     * The column <code>ndt.t_loan_payoff.loan_add_time</code>. 放款登记日期
     */
    public final TableField<TLoanPayoffRecord, Timestamp> LOAN_ADD_TIME = createField("loan_add_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "放款登记日期");

    /**
     * The column <code>ndt.t_loan_payoff.loan_done_time</code>. 放款日期
     */
    public final TableField<TLoanPayoffRecord, Timestamp> LOAN_DONE_TIME = createField("loan_done_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "放款日期");

    /**
     * The column <code>ndt.t_loan_payoff.end_time</code>. 贷款到期日期
     */
    public final TableField<TLoanPayoffRecord, Timestamp> END_TIME = createField("end_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "贷款到期日期");

    /**
     * The column <code>ndt.t_loan_payoff.loan_money</code>. 放款金额
     */
    public final TableField<TLoanPayoffRecord, BigDecimal> LOAN_MONEY = createField("loan_money", org.jooq.impl.SQLDataType.NUMERIC, this, "放款金额");

    /**
     * The column <code>ndt.t_loan_payoff.basic_annual_rate</code>. 基本年利率
     */
    public final TableField<TLoanPayoffRecord, String> BASIC_ANNUAL_RATE = createField("basic_annual_rate", org.jooq.impl.SQLDataType.VARCHAR(10), this, "基本年利率");

    /**
     * The column <code>ndt.t_loan_payoff.floating_rate</code>. 浮动比例
     */
    public final TableField<TLoanPayoffRecord, String> FLOATING_RATE = createField("floating_rate", org.jooq.impl.SQLDataType.VARCHAR(10), this, "浮动比例");

    /**
     * The column <code>ndt.t_loan_payoff.exe_annual_rate</code>. 执行利率
     */
    public final TableField<TLoanPayoffRecord, String> EXE_ANNUAL_RATE = createField("exe_annual_rate", org.jooq.impl.SQLDataType.VARCHAR(10), this, "执行利率");

    /**
     * The column <code>ndt.t_loan_payoff.payoff_time</code>. 还清时间
     */
    public final TableField<TLoanPayoffRecord, Timestamp> PAYOFF_TIME = createField("payoff_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "还清时间");

    /**
     * The column <code>ndt.t_loan_payoff.payoff_type</code>. 还清类型1本金 2利息 3本息
     */
    public final TableField<TLoanPayoffRecord, Integer> PAYOFF_TYPE = createField("payoff_type", org.jooq.impl.SQLDataType.INTEGER, this, "还清类型1本金 2利息 3本息");

    /**
     * The column <code>ndt.t_loan_payoff.payoff_money</code>. 还清金额
     */
    public final TableField<TLoanPayoffRecord, BigDecimal> PAYOFF_MONEY = createField("payoff_money", org.jooq.impl.SQLDataType.NUMERIC, this, "还清金额");

    /**
     * The column <code>ndt.t_loan_payoff.create_time</code>. 创建时间
     */
    public final TableField<TLoanPayoffRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "创建时间");

    /**
     * The column <code>ndt.t_loan_payoff.update_time</code>. 更新时间
     */
    public final TableField<TLoanPayoffRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新时间");

    /**
     * The column <code>ndt.t_loan_payoff.operator_user_id</code>. 操作用户id
     */
    public final TableField<TLoanPayoffRecord, BigDecimal> OPERATOR_USER_ID = createField("operator_user_id", org.jooq.impl.SQLDataType.NUMERIC, this, "操作用户id");

    /**
     * Create a <code>ndt.t_loan_payoff</code> table reference
     */
    public TLoanPayoff() {
        this(DSL.name("t_loan_payoff"), null);
    }

    /**
     * Create an aliased <code>ndt.t_loan_payoff</code> table reference
     */
    public TLoanPayoff(String alias) {
        this(DSL.name(alias), T_LOAN_PAYOFF);
    }

    /**
     * Create an aliased <code>ndt.t_loan_payoff</code> table reference
     */
    public TLoanPayoff(Name alias) {
        this(alias, T_LOAN_PAYOFF);
    }

    private TLoanPayoff(Name alias, Table<TLoanPayoffRecord> aliased) {
        this(alias, aliased, null);
    }

    private TLoanPayoff(Name alias, Table<TLoanPayoffRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "贷款还款表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ndt.NDT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_LOAN_PAYOFF_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TLoanPayoffRecord> getPrimaryKey() {
        return Keys.T_LOAN_PAYOFF_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TLoanPayoffRecord>> getKeys() {
        return Arrays.<UniqueKey<TLoanPayoffRecord>>asList(Keys.T_LOAN_PAYOFF_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TLoanPayoff as(String alias) {
        return new TLoanPayoff(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TLoanPayoff as(Name alias) {
        return new TLoanPayoff(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TLoanPayoff rename(String name) {
        return new TLoanPayoff(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TLoanPayoff rename(Name name) {
        return new TLoanPayoff(name, null);
    }
}
