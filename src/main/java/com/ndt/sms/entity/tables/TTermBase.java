/*
 * This file is generated by jOOQ.
*/
package com.ndt.sms.entity.tables;


import com.ndt.sms.entity.Indexes;
import com.ndt.sms.entity.Keys;
import com.ndt.sms.entity.Ndt;
import com.ndt.sms.entity.tables.records.TTermBaseRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 项目大类型
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TTermBase extends TableImpl<TTermBaseRecord> {

    private static final long serialVersionUID = -358497841;

    /**
     * The reference instance of <code>ndt.t_term_base</code>
     */
    public static final TTermBase T_TERM_BASE = new TTermBase();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TTermBaseRecord> getRecordType() {
        return TTermBaseRecord.class;
    }

    /**
     * The column <code>ndt.t_term_base.id</code>. 主键
     */
    public final TableField<TTermBaseRecord, BigDecimal> ID = createField("id", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "主键");

    /**
     * The column <code>ndt.t_term_base.term_type_code</code>. 项目类型code
     */
    public final TableField<TTermBaseRecord, BigDecimal> TERM_TYPE_CODE = createField("term_type_code", org.jooq.impl.SQLDataType.NUMERIC, this, "项目类型code");

    /**
     * The column <code>ndt.t_term_base.term_type_name</code>. 项目类型名称
     */
    public final TableField<TTermBaseRecord, String> TERM_TYPE_NAME = createField("term_type_name", org.jooq.impl.SQLDataType.VARCHAR(50), this, "项目类型名称");

    /**
     * The column <code>ndt.t_term_base.parent_code</code>. 父类型ID
     */
    public final TableField<TTermBaseRecord, BigDecimal> PARENT_CODE = createField("parent_code", org.jooq.impl.SQLDataType.NUMERIC, this, "父类型ID");

    /**
     * The column <code>ndt.t_term_base.level</code>. 等级
     */
    public final TableField<TTermBaseRecord, Short> LEVEL = createField("level", org.jooq.impl.SQLDataType.SMALLINT, this, "等级");

    /**
     * The column <code>ndt.t_term_base.discount_scale</code>. 贴息比例
     */
    public final TableField<TTermBaseRecord, BigDecimal> DISCOUNT_SCALE = createField("discount_scale", org.jooq.impl.SQLDataType.NUMERIC, this, "贴息比例");

    /**
     * Create a <code>ndt.t_term_base</code> table reference
     */
    public TTermBase() {
        this(DSL.name("t_term_base"), null);
    }

    /**
     * Create an aliased <code>ndt.t_term_base</code> table reference
     */
    public TTermBase(String alias) {
        this(DSL.name(alias), T_TERM_BASE);
    }

    /**
     * Create an aliased <code>ndt.t_term_base</code> table reference
     */
    public TTermBase(Name alias) {
        this(alias, T_TERM_BASE);
    }

    private TTermBase(Name alias, Table<TTermBaseRecord> aliased) {
        this(alias, aliased, null);
    }

    private TTermBase(Name alias, Table<TTermBaseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "项目大类型");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ndt.NDT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_TERM_BASE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TTermBaseRecord> getPrimaryKey() {
        return Keys.T_TERM_BASE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TTermBaseRecord>> getKeys() {
        return Arrays.<UniqueKey<TTermBaseRecord>>asList(Keys.T_TERM_BASE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TTermBase as(String alias) {
        return new TTermBase(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TTermBase as(Name alias) {
        return new TTermBase(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TTermBase rename(String name) {
        return new TTermBase(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TTermBase rename(Name name) {
        return new TTermBase(name, null);
    }
}
