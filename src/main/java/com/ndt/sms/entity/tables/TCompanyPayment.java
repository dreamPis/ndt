/*
 * This file is generated by jOOQ.
*/
package com.ndt.sms.entity.tables;


import com.ndt.sms.entity.Indexes;
import com.ndt.sms.entity.Keys;
import com.ndt.sms.entity.Ndt;
import com.ndt.sms.entity.tables.records.TCompanyPaymentRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 公司缴费信息
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TCompanyPayment extends TableImpl<TCompanyPaymentRecord> {

    private static final long serialVersionUID = 937140337;

    /**
     * The reference instance of <code>ndt.t_company_payment</code>
     */
    public static final TCompanyPayment T_COMPANY_PAYMENT = new TCompanyPayment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TCompanyPaymentRecord> getRecordType() {
        return TCompanyPaymentRecord.class;
    }

    /**
     * The column <code>ndt.t_company_payment.id</code>.
     */
    public final TableField<TCompanyPaymentRecord, BigDecimal> ID = createField("id", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>ndt.t_company_payment.company_detail_id</code>. 公司详情ID
     */
    public final TableField<TCompanyPaymentRecord, BigDecimal> COMPANY_DETAIL_ID = createField("company_detail_id", org.jooq.impl.SQLDataType.NUMERIC, this, "公司详情ID");

    /**
     * The column <code>ndt.t_company_payment.name</code>. 缴费名称
     */
    public final TableField<TCompanyPaymentRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(200), this, "缴费名称");

    /**
     * The column <code>ndt.t_company_payment.pay_amt</code>. 缴费金额
     */
    public final TableField<TCompanyPaymentRecord, BigDecimal> PAY_AMT = createField("pay_amt", org.jooq.impl.SQLDataType.NUMERIC, this, "缴费金额");

    /**
     * The column <code>ndt.t_company_payment.pay_date</code>. 缴费日期
     */
    public final TableField<TCompanyPaymentRecord, Timestamp> PAY_DATE = createField("pay_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "缴费日期");

    /**
     * The column <code>ndt.t_company_payment.goods_num</code>. 商品数量
     */
    public final TableField<TCompanyPaymentRecord, String> GOODS_NUM = createField("goods_num", org.jooq.impl.SQLDataType.VARCHAR(30), this, "商品数量");

    /**
     * The column <code>ndt.t_company_payment.status</code>.
     */
    public final TableField<TCompanyPaymentRecord, Short> STATUS = createField("status", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>ndt.t_company_payment.create_by</code>.
     */
    public final TableField<TCompanyPaymentRecord, BigDecimal> CREATE_BY = createField("create_by", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>ndt.t_company_payment.create_at</code>.
     */
    public final TableField<TCompanyPaymentRecord, Timestamp> CREATE_AT = createField("create_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>ndt.t_company_payment.update_by</code>.
     */
    public final TableField<TCompanyPaymentRecord, BigDecimal> UPDATE_BY = createField("update_by", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>ndt.t_company_payment.update_at</code>.
     */
    public final TableField<TCompanyPaymentRecord, Timestamp> UPDATE_AT = createField("update_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>ndt.t_company_payment</code> table reference
     */
    public TCompanyPayment() {
        this(DSL.name("t_company_payment"), null);
    }

    /**
     * Create an aliased <code>ndt.t_company_payment</code> table reference
     */
    public TCompanyPayment(String alias) {
        this(DSL.name(alias), T_COMPANY_PAYMENT);
    }

    /**
     * Create an aliased <code>ndt.t_company_payment</code> table reference
     */
    public TCompanyPayment(Name alias) {
        this(alias, T_COMPANY_PAYMENT);
    }

    private TCompanyPayment(Name alias, Table<TCompanyPaymentRecord> aliased) {
        this(alias, aliased, null);
    }

    private TCompanyPayment(Name alias, Table<TCompanyPaymentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "公司缴费信息");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ndt.NDT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_COMPANY_PAYMENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TCompanyPaymentRecord> getPrimaryKey() {
        return Keys.T_COMPANY_PAYMENT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TCompanyPaymentRecord>> getKeys() {
        return Arrays.<UniqueKey<TCompanyPaymentRecord>>asList(Keys.T_COMPANY_PAYMENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TCompanyPayment as(String alias) {
        return new TCompanyPayment(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TCompanyPayment as(Name alias) {
        return new TCompanyPayment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TCompanyPayment rename(String name) {
        return new TCompanyPayment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TCompanyPayment rename(Name name) {
        return new TCompanyPayment(name, null);
    }
}
