/*
 * This file is generated by jOOQ.
*/
package com.ndt.sms.entity.tables;


import com.ndt.sms.entity.Indexes;
import com.ndt.sms.entity.Keys;
import com.ndt.sms.entity.Ndt;
import com.ndt.sms.entity.tables.records.TRiskshareApplyRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 风险分担申请
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TRiskshareApply extends TableImpl<TRiskshareApplyRecord> {

    private static final long serialVersionUID = 82171758;

    /**
     * The reference instance of <code>ndt.t_riskshare_apply</code>
     */
    public static final TRiskshareApply T_RISKSHARE_APPLY = new TRiskshareApply();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TRiskshareApplyRecord> getRecordType() {
        return TRiskshareApplyRecord.class;
    }

    /**
     * The column <code>ndt.t_riskshare_apply.id</code>.
     */
    public final TableField<TRiskshareApplyRecord, BigDecimal> ID = createField("id", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>ndt.t_riskshare_apply.org_id</code>. 申请机构ID,来自于三种金融机构之一
     */
    public final TableField<TRiskshareApplyRecord, BigDecimal> ORG_ID = createField("org_id", org.jooq.impl.SQLDataType.NUMERIC, this, "申请机构ID,来自于三种金融机构之一");

    /**
     * The column <code>ndt.t_riskshare_apply.type</code>. 风险资金类型
     */
    public final TableField<TRiskshareApplyRecord, Integer> TYPE = createField("type", org.jooq.impl.SQLDataType.INTEGER, this, "风险资金类型");

    /**
     * The column <code>ndt.t_riskshare_apply.loan_apply_id</code>. 申请ID,参考贷款申请主键
     */
    public final TableField<TRiskshareApplyRecord, BigDecimal> LOAN_APPLY_ID = createField("loan_apply_id", org.jooq.impl.SQLDataType.NUMERIC, this, "申请ID,参考贷款申请主键");

    /**
     * The column <code>ndt.t_riskshare_apply.loan_apply_time</code>. 申请时间,参考贷款申请时间
     */
    public final TableField<TRiskshareApplyRecord, Timestamp> LOAN_APPLY_TIME = createField("loan_apply_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "申请时间,参考贷款申请时间");

    /**
     * The column <code>ndt.t_riskshare_apply.invitation_id</code>. 邀约ID,参考贷款邀约主键
     */
    public final TableField<TRiskshareApplyRecord, BigDecimal> INVITATION_ID = createField("invitation_id", org.jooq.impl.SQLDataType.NUMERIC, this, "邀约ID,参考贷款邀约主键");

    /**
     * The column <code>ndt.t_riskshare_apply.invitation_code</code>. 邀约业务码,参考贷款邀约业务码
     */
    public final TableField<TRiskshareApplyRecord, String> INVITATION_CODE = createField("invitation_code", org.jooq.impl.SQLDataType.VARCHAR(20), this, "邀约业务码,参考贷款邀约业务码");

    /**
     * The column <code>ndt.t_riskshare_apply.invitation_user_id</code>. 贷款主体ID,参考贷款邀约user_id
     */
    public final TableField<TRiskshareApplyRecord, BigDecimal> INVITATION_USER_ID = createField("invitation_user_id", org.jooq.impl.SQLDataType.NUMERIC, this, "贷款主体ID,参考贷款邀约user_id");

    /**
     * The column <code>ndt.t_riskshare_apply.invitation_user_type</code>. 贷款主体类型,参考用户表user_type
     */
    public final TableField<TRiskshareApplyRecord, Integer> INVITATION_USER_TYPE = createField("invitation_user_type", org.jooq.impl.SQLDataType.INTEGER, this, "贷款主体类型,参考用户表user_type");

    /**
     * The column <code>ndt.t_riskshare_apply.user_admindivision_id</code>. 贷款主体所在区域,参考用户表admindivision_id
     */
    public final TableField<TRiskshareApplyRecord, BigDecimal> USER_ADMINDIVISION_ID = createField("user_admindivision_id", org.jooq.impl.SQLDataType.NUMERIC, this, "贷款主体所在区域,参考用户表admindivision_id");

    /**
     * The column <code>ndt.t_riskshare_apply.loan_done_amount</code>. 放款金额
     */
    public final TableField<TRiskshareApplyRecord, BigDecimal> LOAN_DONE_AMOUNT = createField("loan_done_amount", org.jooq.impl.SQLDataType.NUMERIC, this, "放款金额");

    /**
     * The column <code>ndt.t_riskshare_apply.apply_amount</code>. 申请分担金额
     */
    public final TableField<TRiskshareApplyRecord, BigDecimal> APPLY_AMOUNT = createField("apply_amount", org.jooq.impl.SQLDataType.NUMERIC, this, "申请分担金额");

    /**
     * The column <code>ndt.t_riskshare_apply.files</code>. 申请提供文件
     */
    public final TableField<TRiskshareApplyRecord, String> FILES = createField("files", org.jooq.impl.SQLDataType.VARCHAR(300), this, "申请提供文件");

    /**
     * The column <code>ndt.t_riskshare_apply.state</code>. 分担申请所处阶段
     */
    public final TableField<TRiskshareApplyRecord, Integer> STATE = createField("state", org.jooq.impl.SQLDataType.INTEGER, this, "分担申请所处阶段");

    /**
     * The column <code>ndt.t_riskshare_apply.create_user</code>.
     */
    public final TableField<TRiskshareApplyRecord, BigDecimal> CREATE_USER = createField("create_user", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>ndt.t_riskshare_apply.create_time</code>.
     */
    public final TableField<TRiskshareApplyRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>ndt.t_riskshare_apply.update_user</code>.
     */
    public final TableField<TRiskshareApplyRecord, BigDecimal> UPDATE_USER = createField("update_user", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>ndt.t_riskshare_apply.update_time</code>.
     */
    public final TableField<TRiskshareApplyRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>ndt.t_riskshare_apply.status</code>.
     */
    public final TableField<TRiskshareApplyRecord, Short> STATUS = createField("status", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * Create a <code>ndt.t_riskshare_apply</code> table reference
     */
    public TRiskshareApply() {
        this(DSL.name("t_riskshare_apply"), null);
    }

    /**
     * Create an aliased <code>ndt.t_riskshare_apply</code> table reference
     */
    public TRiskshareApply(String alias) {
        this(DSL.name(alias), T_RISKSHARE_APPLY);
    }

    /**
     * Create an aliased <code>ndt.t_riskshare_apply</code> table reference
     */
    public TRiskshareApply(Name alias) {
        this(alias, T_RISKSHARE_APPLY);
    }

    private TRiskshareApply(Name alias, Table<TRiskshareApplyRecord> aliased) {
        this(alias, aliased, null);
    }

    private TRiskshareApply(Name alias, Table<TRiskshareApplyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "风险分担申请");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ndt.NDT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_RISKSHARE_APPLY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TRiskshareApplyRecord> getPrimaryKey() {
        return Keys.T_RISKSHARE_APPLY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TRiskshareApplyRecord>> getKeys() {
        return Arrays.<UniqueKey<TRiskshareApplyRecord>>asList(Keys.T_RISKSHARE_APPLY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TRiskshareApply as(String alias) {
        return new TRiskshareApply(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TRiskshareApply as(Name alias) {
        return new TRiskshareApply(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TRiskshareApply rename(String name) {
        return new TRiskshareApply(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TRiskshareApply rename(Name name) {
        return new TRiskshareApply(name, null);
    }
}
