/*
 * This file is generated by jOOQ.
*/
package com.ndt.sms.entity.tables;


import com.ndt.sms.entity.Indexes;
import com.ndt.sms.entity.Keys;
import com.ndt.sms.entity.Ndt;
import com.ndt.sms.entity.tables.records.TCollectionRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TCollection extends TableImpl<TCollectionRecord> {

    private static final long serialVersionUID = 1873123948;

    /**
     * The reference instance of <code>ndt.t_collection</code>
     */
    public static final TCollection T_COLLECTION = new TCollection();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TCollectionRecord> getRecordType() {
        return TCollectionRecord.class;
    }

    /**
     * The column <code>ndt.t_collection.id</code>. id
     */
    public final TableField<TCollectionRecord, BigDecimal> ID = createField("id", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "id");

    /**
     * The column <code>ndt.t_collection.user_id</code>. 用户ID
     */
    public final TableField<TCollectionRecord, BigDecimal> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.NUMERIC, this, "用户ID");

    /**
     * The column <code>ndt.t_collection.collection_id</code>. 收藏资源ID
     */
    public final TableField<TCollectionRecord, BigDecimal> COLLECTION_ID = createField("collection_id", org.jooq.impl.SQLDataType.NUMERIC, this, "收藏资源ID");

    /**
     * The column <code>ndt.t_collection.collection_type</code>. 收藏类型(1、文章,2、保险产品,3、贷款产品)
     */
    public final TableField<TCollectionRecord, Integer> COLLECTION_TYPE = createField("collection_type", org.jooq.impl.SQLDataType.INTEGER, this, "收藏类型(1、文章,2、保险产品,3、贷款产品)");

    /**
     * The column <code>ndt.t_collection.collection_time</code>. 收藏时间
     */
    public final TableField<TCollectionRecord, Timestamp> COLLECTION_TIME = createField("collection_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "收藏时间");

    /**
     * Create a <code>ndt.t_collection</code> table reference
     */
    public TCollection() {
        this(DSL.name("t_collection"), null);
    }

    /**
     * Create an aliased <code>ndt.t_collection</code> table reference
     */
    public TCollection(String alias) {
        this(DSL.name(alias), T_COLLECTION);
    }

    /**
     * Create an aliased <code>ndt.t_collection</code> table reference
     */
    public TCollection(Name alias) {
        this(alias, T_COLLECTION);
    }

    private TCollection(Name alias, Table<TCollectionRecord> aliased) {
        this(alias, aliased, null);
    }

    private TCollection(Name alias, Table<TCollectionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ndt.NDT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_COLLECTION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TCollectionRecord> getPrimaryKey() {
        return Keys.T_COLLECTION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TCollectionRecord>> getKeys() {
        return Arrays.<UniqueKey<TCollectionRecord>>asList(Keys.T_COLLECTION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TCollection as(String alias) {
        return new TCollection(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TCollection as(Name alias) {
        return new TCollection(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TCollection rename(String name) {
        return new TCollection(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TCollection rename(Name name) {
        return new TCollection(name, null);
    }
}
