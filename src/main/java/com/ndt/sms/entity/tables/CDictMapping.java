/*
 * This file is generated by jOOQ.
*/
package com.ndt.sms.entity.tables;


import com.ndt.sms.entity.Indexes;
import com.ndt.sms.entity.Keys;
import com.ndt.sms.entity.Ndt;
import com.ndt.sms.entity.tables.records.CDictMappingRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 码表映射
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CDictMapping extends TableImpl<CDictMappingRecord> {

    private static final long serialVersionUID = -583433360;

    /**
     * The reference instance of <code>ndt.c_dict_mapping</code>
     */
    public static final CDictMapping C_DICT_MAPPING = new CDictMapping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CDictMappingRecord> getRecordType() {
        return CDictMappingRecord.class;
    }

    /**
     * The column <code>ndt.c_dict_mapping.id</code>.
     */
    public final TableField<CDictMappingRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ndt.c_dict_mapping.type_id</code>. 码表类型ID
     */
    public final TableField<CDictMappingRecord, Integer> TYPE_ID = createField("type_id", org.jooq.impl.SQLDataType.INTEGER, this, "码表类型ID");

    /**
     * The column <code>ndt.c_dict_mapping.key</code>. 码表KEY
     */
    public final TableField<CDictMappingRecord, Short> KEY = createField("key", org.jooq.impl.SQLDataType.SMALLINT, this, "码表KEY");

    /**
     * The column <code>ndt.c_dict_mapping.value</code>. 码表VALUE
     */
    public final TableField<CDictMappingRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.VARCHAR(20), this, "码表VALUE");

    /**
     * The column <code>ndt.c_dict_mapping.status</code>. 记录状态
     */
    public final TableField<CDictMappingRecord, Short> STATUS = createField("status", org.jooq.impl.SQLDataType.SMALLINT, this, "记录状态");

    /**
     * The column <code>ndt.c_dict_mapping.update_at</code>. 更新时间
     */
    public final TableField<CDictMappingRecord, Timestamp> UPDATE_AT = createField("update_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新时间");

    /**
     * The column <code>ndt.c_dict_mapping.update_by</code>. 更新人
     */
    public final TableField<CDictMappingRecord, BigDecimal> UPDATE_BY = createField("update_by", org.jooq.impl.SQLDataType.NUMERIC, this, "更新人");

    /**
     * Create a <code>ndt.c_dict_mapping</code> table reference
     */
    public CDictMapping() {
        this(DSL.name("c_dict_mapping"), null);
    }

    /**
     * Create an aliased <code>ndt.c_dict_mapping</code> table reference
     */
    public CDictMapping(String alias) {
        this(DSL.name(alias), C_DICT_MAPPING);
    }

    /**
     * Create an aliased <code>ndt.c_dict_mapping</code> table reference
     */
    public CDictMapping(Name alias) {
        this(alias, C_DICT_MAPPING);
    }

    private CDictMapping(Name alias, Table<CDictMappingRecord> aliased) {
        this(alias, aliased, null);
    }

    private CDictMapping(Name alias, Table<CDictMappingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "码表映射");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ndt.NDT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.C_DICT_MAPPING_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CDictMappingRecord> getPrimaryKey() {
        return Keys.C_DICT_MAPPING_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CDictMappingRecord>> getKeys() {
        return Arrays.<UniqueKey<CDictMappingRecord>>asList(Keys.C_DICT_MAPPING_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CDictMapping as(String alias) {
        return new CDictMapping(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CDictMapping as(Name alias) {
        return new CDictMapping(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CDictMapping rename(String name) {
        return new CDictMapping(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CDictMapping rename(Name name) {
        return new CDictMapping(name, null);
    }
}
