/*
 * This file is generated by jOOQ.
*/
package com.ndt.sms.entity.tables;


import com.ndt.sms.entity.Indexes;
import com.ndt.sms.entity.Keys;
import com.ndt.sms.entity.Ndt;
import com.ndt.sms.entity.tables.records.CSensitiveWordsRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 敏感词
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CSensitiveWords extends TableImpl<CSensitiveWordsRecord> {

    private static final long serialVersionUID = -1537669010;

    /**
     * The reference instance of <code>ndt.c_sensitive_words</code>
     */
    public static final CSensitiveWords C_SENSITIVE_WORDS = new CSensitiveWords();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CSensitiveWordsRecord> getRecordType() {
        return CSensitiveWordsRecord.class;
    }

    /**
     * The column <code>ndt.c_sensitive_words.id</code>.
     */
    public final TableField<CSensitiveWordsRecord, BigDecimal> ID = createField("id", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>ndt.c_sensitive_words.word</code>. 分词
     */
    public final TableField<CSensitiveWordsRecord, String> WORD = createField("word", org.jooq.impl.SQLDataType.VARCHAR(60), this, "分词");

    /**
     * Create a <code>ndt.c_sensitive_words</code> table reference
     */
    public CSensitiveWords() {
        this(DSL.name("c_sensitive_words"), null);
    }

    /**
     * Create an aliased <code>ndt.c_sensitive_words</code> table reference
     */
    public CSensitiveWords(String alias) {
        this(DSL.name(alias), C_SENSITIVE_WORDS);
    }

    /**
     * Create an aliased <code>ndt.c_sensitive_words</code> table reference
     */
    public CSensitiveWords(Name alias) {
        this(alias, C_SENSITIVE_WORDS);
    }

    private CSensitiveWords(Name alias, Table<CSensitiveWordsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CSensitiveWords(Name alias, Table<CSensitiveWordsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "敏感词");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ndt.NDT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.C_SENSITIVE_WORDS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CSensitiveWordsRecord> getPrimaryKey() {
        return Keys.C_SENSITIVE_WORDS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CSensitiveWordsRecord>> getKeys() {
        return Arrays.<UniqueKey<CSensitiveWordsRecord>>asList(Keys.C_SENSITIVE_WORDS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CSensitiveWords as(String alias) {
        return new CSensitiveWords(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CSensitiveWords as(Name alias) {
        return new CSensitiveWords(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CSensitiveWords rename(String name) {
        return new CSensitiveWords(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CSensitiveWords rename(Name name) {
        return new CSensitiveWords(name, null);
    }
}
