/*
 * This file is generated by jOOQ.
*/
package com.ndt.sms.entity.tables;


import com.ndt.sms.entity.Indexes;
import com.ndt.sms.entity.Keys;
import com.ndt.sms.entity.Ndt;
import com.ndt.sms.entity.tables.records.TStaticSourceBakRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 静态资源对应fastdfs表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TStaticSourceBak extends TableImpl<TStaticSourceBakRecord> {

    private static final long serialVersionUID = -244203698;

    /**
     * The reference instance of <code>ndt.t_static_source_bak</code>
     */
    public static final TStaticSourceBak T_STATIC_SOURCE_BAK = new TStaticSourceBak();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TStaticSourceBakRecord> getRecordType() {
        return TStaticSourceBakRecord.class;
    }

    /**
     * The column <code>ndt.t_static_source_bak.id</code>. id
     */
    public final TableField<TStaticSourceBakRecord, BigDecimal> ID = createField("id", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "id");

    /**
     * The column <code>ndt.t_static_source_bak.name</code>. 静态图片区域名称
     */
    public final TableField<TStaticSourceBakRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "静态图片区域名称");

    /**
     * The column <code>ndt.t_static_source_bak.source_path</code>. 源文件路径
     */
    public final TableField<TStaticSourceBakRecord, String> SOURCE_PATH = createField("source_path", org.jooq.impl.SQLDataType.VARCHAR(120).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "源文件路径");

    /**
     * The column <code>ndt.t_static_source_bak.target_path</code>. 目的文件路径
     */
    public final TableField<TStaticSourceBakRecord, String> TARGET_PATH = createField("target_path", org.jooq.impl.SQLDataType.VARCHAR(120).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "目的文件路径");

    /**
     * The column <code>ndt.t_static_source_bak.source_w</code>. 图片宽
     */
    public final TableField<TStaticSourceBakRecord, Integer> SOURCE_W = createField("source_w", org.jooq.impl.SQLDataType.INTEGER, this, "图片宽");

    /**
     * The column <code>ndt.t_static_source_bak.source_h</code>. 图片高
     */
    public final TableField<TStaticSourceBakRecord, Integer> SOURCE_H = createField("source_h", org.jooq.impl.SQLDataType.INTEGER, this, "图片高");

    /**
     * Create a <code>ndt.t_static_source_bak</code> table reference
     */
    public TStaticSourceBak() {
        this(DSL.name("t_static_source_bak"), null);
    }

    /**
     * Create an aliased <code>ndt.t_static_source_bak</code> table reference
     */
    public TStaticSourceBak(String alias) {
        this(DSL.name(alias), T_STATIC_SOURCE_BAK);
    }

    /**
     * Create an aliased <code>ndt.t_static_source_bak</code> table reference
     */
    public TStaticSourceBak(Name alias) {
        this(alias, T_STATIC_SOURCE_BAK);
    }

    private TStaticSourceBak(Name alias, Table<TStaticSourceBakRecord> aliased) {
        this(alias, aliased, null);
    }

    private TStaticSourceBak(Name alias, Table<TStaticSourceBakRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "静态资源对应fastdfs表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ndt.NDT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_T_STATIC_SOURCE_BAK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TStaticSourceBakRecord> getPrimaryKey() {
        return Keys.PK_T_STATIC_SOURCE_BAK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TStaticSourceBakRecord>> getKeys() {
        return Arrays.<UniqueKey<TStaticSourceBakRecord>>asList(Keys.PK_T_STATIC_SOURCE_BAK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TStaticSourceBak as(String alias) {
        return new TStaticSourceBak(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TStaticSourceBak as(Name alias) {
        return new TStaticSourceBak(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TStaticSourceBak rename(String name) {
        return new TStaticSourceBak(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TStaticSourceBak rename(Name name) {
        return new TStaticSourceBak(name, null);
    }
}
