/*
 * This file is generated by jOOQ.
*/
package com.ndt.sms.entity.tables;


import com.ndt.sms.entity.Indexes;
import com.ndt.sms.entity.Keys;
import com.ndt.sms.entity.Ndt;
import com.ndt.sms.entity.tables.records.TRiskshareDoneRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 风险分担结果
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TRiskshareDone extends TableImpl<TRiskshareDoneRecord> {

    private static final long serialVersionUID = 1527763935;

    /**
     * The reference instance of <code>ndt.t_riskshare_done</code>
     */
    public static final TRiskshareDone T_RISKSHARE_DONE = new TRiskshareDone();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TRiskshareDoneRecord> getRecordType() {
        return TRiskshareDoneRecord.class;
    }

    /**
     * The column <code>ndt.t_riskshare_done.id</code>.
     */
    public final TableField<TRiskshareDoneRecord, BigDecimal> ID = createField("id", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>ndt.t_riskshare_done.riskshare_apply_id</code>. 风险分担申请ID
     */
    public final TableField<TRiskshareDoneRecord, BigDecimal> RISKSHARE_APPLY_ID = createField("riskshare_apply_id", org.jooq.impl.SQLDataType.NUMERIC, this, "风险分担申请ID");

    /**
     * The column <code>ndt.t_riskshare_done.amount</code>. 风险分担金额
     */
    public final TableField<TRiskshareDoneRecord, BigDecimal> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.NUMERIC, this, "风险分担金额");

    /**
     * The column <code>ndt.t_riskshare_done.org_id</code>. 风险分担申请机构ID
     */
    public final TableField<TRiskshareDoneRecord, BigDecimal> ORG_ID = createField("org_id", org.jooq.impl.SQLDataType.NUMERIC, this, "风险分担申请机构ID");

    /**
     * The column <code>ndt.t_riskshare_done.invitation_user_id</code>. 风险分担贷款主体ID
     */
    public final TableField<TRiskshareDoneRecord, BigDecimal> INVITATION_USER_ID = createField("invitation_user_id", org.jooq.impl.SQLDataType.NUMERIC, this, "风险分担贷款主体ID");

    /**
     * The column <code>ndt.t_riskshare_done.invitation_user_type</code>. 风险分担贷款主体类型
     */
    public final TableField<TRiskshareDoneRecord, Integer> INVITATION_USER_TYPE = createField("invitation_user_type", org.jooq.impl.SQLDataType.INTEGER, this, "风险分担贷款主体类型");

    /**
     * The column <code>ndt.t_riskshare_done.user_admindivision_id</code>. 风险分担贷款主体所处行政区域
     */
    public final TableField<TRiskshareDoneRecord, BigDecimal> USER_ADMINDIVISION_ID = createField("user_admindivision_id", org.jooq.impl.SQLDataType.NUMERIC, this, "风险分担贷款主体所处行政区域");

    /**
     * The column <code>ndt.t_riskshare_done.create_user</code>.
     */
    public final TableField<TRiskshareDoneRecord, BigDecimal> CREATE_USER = createField("create_user", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>ndt.t_riskshare_done.create_time</code>.
     */
    public final TableField<TRiskshareDoneRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>ndt.t_riskshare_done.status</code>.
     */
    public final TableField<TRiskshareDoneRecord, Short> STATUS = createField("status", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * Create a <code>ndt.t_riskshare_done</code> table reference
     */
    public TRiskshareDone() {
        this(DSL.name("t_riskshare_done"), null);
    }

    /**
     * Create an aliased <code>ndt.t_riskshare_done</code> table reference
     */
    public TRiskshareDone(String alias) {
        this(DSL.name(alias), T_RISKSHARE_DONE);
    }

    /**
     * Create an aliased <code>ndt.t_riskshare_done</code> table reference
     */
    public TRiskshareDone(Name alias) {
        this(alias, T_RISKSHARE_DONE);
    }

    private TRiskshareDone(Name alias, Table<TRiskshareDoneRecord> aliased) {
        this(alias, aliased, null);
    }

    private TRiskshareDone(Name alias, Table<TRiskshareDoneRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "风险分担结果");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ndt.NDT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_RISKSHARE_DONE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TRiskshareDoneRecord> getPrimaryKey() {
        return Keys.T_RISKSHARE_DONE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TRiskshareDoneRecord>> getKeys() {
        return Arrays.<UniqueKey<TRiskshareDoneRecord>>asList(Keys.T_RISKSHARE_DONE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TRiskshareDone as(String alias) {
        return new TRiskshareDone(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TRiskshareDone as(Name alias) {
        return new TRiskshareDone(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TRiskshareDone rename(String name) {
        return new TRiskshareDone(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TRiskshareDone rename(Name name) {
        return new TRiskshareDone(name, null);
    }
}
